<?php/* * Simvc PHP Framework * Copyright 2010, Eugene Maslovich * ehpc@yandex.ru * http://ehpc.org.ru/simvcframework/ * */// Make string camelCasedfunction camelize($str){    $str{0} = strtolower($str{0});    return $str;}// Extract file name from path (without extension)function getFileName($path){    $fileName = basename($path);    $pos = strrpos($fileName, '.');    if ($pos === false)    {        return $fileName;    }    else    {        $baseName = substr($fileName, 0, $pos);        return $baseName;    }}// Dispose array of empty valuesfunction clearArray($array){    $clearedArray = array();    foreach ($array as $value)    {        if (!empty($value))        {            $clearedArray[] = $value;        }    }    return $clearedArray;}// Removes server root hierarchy from pathfunction stripRootDir($dir){    $dir = str_replace("\\", "/", $dir);    return str_replace(str_replace("\\", "/", $_SERVER['DOCUMENT_ROOT']), "", $dir);}// Autoloading classes \function autoloadSimvc($className){    $result = @include dirname(__FILE__)."/".camelize($className).'.php';}spl_autoload_register("autoloadSimvc");function autoloadControllers($className){    $classDir = ''.strtolower($className).'/';    set_include_path(get_include_path().PATH_SEPARATOR.$classDir);    $result = @include $classDir.strtolower($className).'.php';}spl_autoload_register("autoloadControllers");class Simvc{    private $params = array(); // Uri parameters; Ex: /blog/:id    private $variables = array(); // User variables accessible anywhere    private $styles = array(); // Contains css uris    private $scripts = array(); // Contains js uris    public $pageTitle = "Simvc default title"; // Page title in <title>    public $errorPageTitle = "Simvc default error title"; // Page title for error page    public $errorTemplatePath = "error.html"; // Error template file name    public $layoutTemplatePath = "layout.html"; // Main layout file name    public $uriCss = "/public/css/"; // Uri of public folder where css are stored    public $uriJs = "/public/js/"; // Uri of public folder where js are stored    public $uriImages = "/public/images/"; // Uri of public folder where images are stored    public $uriSimvc = "/simvc/"; // Uri from which simvc is accessed    public $uri = ""; // Uri by which this Simvc instance is accessed    public $method = ""; // Method name for current controller action    public $controllerPath = ""; // Path where controller file is situated    public $navigation; // SimvcNavigation instance    public $model; // SimvcModel instance    public $auth; // SimvcAuth instance    public $routeTable = array(); // Routing table    function  __construct()    {        set_include_path(get_include_path().PATH_SEPARATOR.dirname(__FILE__));        @session_start();        $this->navigation = new SimvcNavigation($this);        $this->addStyle($this->uriSimvc."css/reset.css", false);        $this->addStyle($this->uriCss."global.css");        $this->addScript($this->uriSimvc."js/jquery.js", false);        $this->addScript($this->uriJs."global.js");    }    // Load SimvcModel and dependencies    public function setupDb($modelDsn, $modelUser = "", $modelPassword = "")    {        $this->model = new SimvcModel($this, $modelDsn, $modelUser, $modelPassword);        $this->auth = new SimvcAuth($this);    }    // Load dynomagic    public function dynomagicIncludes()    {        $this->addStyle($this->uriSimvc."css/dynomagic/sh/shCore.css", false);        $this->addStyle($this->uriSimvc."css/dynomagic/sh/shThemeDefault.css", false);        $this->addStyle($this->uriSimvc."css/dynomagic/dynomagic.css");                $this->addScript($this->uriSimvc."js/dynomagic/dynomagic.js");        $this->addScript($this->uriSimvc."js/dynomagic/progress.js");        $this->addScript($this->uriSimvc."js/dynomagic/jquery.textarearesizer.js");        $this->addScript($this->uriSimvc."js/dynomagic/text.transform.js");        $this->addScript($this->uriSimvc."js/dynomagic/jquery.youtubin.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shCore.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushJScript.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushPhp.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushCSharp.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushCss.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushXml.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushPlain.js", false);        $this->addScript($this->uriSimvc."js/dynomagic/sh/shBrushSql.js", false);    }    // Converts value to suitable output for dynomagic javascript input    // using JSON and object notation    public function dynomagicOutput($var, $table = null, $output = true)    {        $res = "{}";        // If object represents redbean table        if ($table !== null)        {            $arr = array();            foreach ($var->getIterator() as $key => $value)            {                $arr[$key] = $value;            }            $res = (object)array("db"=>(object)array($table=>(object)$arr));            $res = json_encode($res);        }        // If objest is simple variable        else        {            $res = json_encode($var);        }        if ($output)        {            header('Cache-Control: no-cache, must-revalidate');            header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');            header('Content-type: application/json');            echo $res;        }        else        {            return $res;        }    }    // Getter and setter for user variables    public function data($varName, $varValue = null)    {        // If user wants to set variable        if ($varValue != null)        {            $this->variables[$varName] = $varValue;        }        // If user wants to get variable        else        {            if (array_key_exists($varName, $this->variables))            {                return $this->variables[$varName];            }            else            {                return null;            }        }    }    // Getter and setter for session variables    public function session($varName, $varValue = null, $unset = false)    {        // If destroy variable        if ($unset)        {            unset($_SESSION[$varName]);        }        else        {            // Set variable            if ($varValue != null)            {                $_SESSION[$varName] = $varValue;            }            // Get variable            else            {                if (array_key_exists($varName, $_SESSION))                {                    return $_SESSION[$varName];                }                else                {                    return null;                }            }        }    }    // Output template in-place (right after calling this function)    public function template($templatePath, $partial = true, $defaults = true)    {        // If loading default resources        if ($defaults)        {            // Try to add default style if one exists            $defaultStyle = $this->controllerPath."/".getFileName($templatePath).".css";            if (file_exists($defaultStyle))            {                $this->addStyle(stripRootDir($this->controllerPath)."/".getFileName($templatePath).".css");            }            // Try to add default script if one exists            $defaultScript = $this->controllerPath."/".getFileName($templatePath).".js";            if (file_exists($defaultScript))            {                $this->addScript(stripRootDir($this->controllerPath)."/".getFileName($templatePath).".js");            }        }        $this->layoutBodyTemplate = $templatePath;        // If user wants to load layout first        if ($partial)        {            include $this->layoutTemplatePath;        }        // If user doesn't want to load a layout        else        {            include $templatePath;        }    }    // Add css style    public function addStyle($cssUri, $nocache = true)    {        if (!in_array($cssUri, $this->styles))        {            $str = "";            // Prevent caching            if ($nocache)            {                $str = "?".rand(0, 99999);            }            $this->styles[] = $cssUri.$str;        }    }    // Add javascript    public function addScript($scriptUri, $nocache = true)    {        if (!in_array($scriptUri, $this->scripts))        {            $str = "";            // Prevent caching            if ($nocache)            {                $str = "?".rand(0, 99999);            }            $this->scripts[] = $scriptUri.$str;        }    }    // Remove all scripts    public function clearScripts()    {        $this->scripts = array();    }    // Remove all css styles    public function clearStyles()    {        $this->styles = array();    }    // Returns html-<head>-compatible string of all styles    public function styles()    {        $result = "";        foreach ($this->styles as $style)        {            $result .= '<link rel="stylesheet" type="text/css" href="'.$style.'" />'."\n";        }        return $result;    }    // Returns html-<head>-compatible string of all scripts    public function scripts()    {        $result = "";        foreach ($this->scripts as $script)        {            $result .= '<script type="text/javascript" src="'.$script.'"></script>'."\n";        }        return $result;    }        // Matches supplied uri with available actions    private function findAction($method, $uri)    {        foreach ($this->routeTable as $route)        {            // Example: route('GET', '/blog/:id', ...            if ((!empty($route['route'])) && ($method == $route['method']))            {                // Making regular expression out of route                // WARNING: may be problems with regex special chars                $replacePatterns = array('/\:([^\/]+)/', '/\*/', '/\//');                $replaceStrings = array('(?P<$1>.+)', '(.+)', '\\/');                $routePattern = '/^'.preg_replace($replacePatterns, $replaceStrings, $route['route']).'$/';                // Now finding out if route pattern matches uri                preg_match_all($routePattern, $uri, $routeMatches);                if (!empty($routeMatches[0][0]))                {                    $this->uri = $uri;                    $this->params = $routeMatches;                    // Returning matched action                    return array('action'=>$route['action']);                }            }        }        return false;    }        // Returns resolved variable from route    public function param($name)    {        if (array_key_exists($name, $this->params))        {            return $this->params[$name][0];        }        else        {            return false;        }    }        // Adds route to table    public function route($method, $route, $action)    {        $this->routeTable[] = array('method'=>$method, 'route'=>$route, 'action'=>$action);    }    // Execute an action    public function call($action)    {        // Assume it is 'Class::Method' action        if (strpos($action, '::') !== false)        {            $arr = explode('::', $action);            // Instantiate controller            $controller = new $arr[0]($this);            $class_info = new ReflectionClass($controller);            // Getting controller path            $controller->contollerPath = dirname($class_info->getFileName());            $this->controllerPath = dirname($class_info->getFileName());            // Executing action            $controller->$arr[1]();            return true;        }        else        {            return false;        }    }    // Main routine    public function run()    {        $this->method = $_SERVER['REQUEST_METHOD'];        // Execute action if any        $action = $this->findAction($_SERVER['REQUEST_METHOD'], $_SERVER['REQUEST_URI']);        if ($action)        {            $this->call($action['action']);        }        else        {            $this->error();        }    }    // Display error    public function error()    {        $this->controllerPath = dirname(__FILE__);        $this->pageTitle = $this->errorPageTitle;        $this->addStyle($this->uriCss."error.css");        $this->template($this->errorTemplatePath, $partial = true, $defaults = false);    }    // Redirect to another location    public function redirect($uri)    {        header("Location: ".$uri);    }}